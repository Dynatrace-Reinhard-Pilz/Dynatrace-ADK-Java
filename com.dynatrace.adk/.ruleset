<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
   <description/>
   <rule ref="rulesets/migrating.xml/AvoidAssertAsIdentifier">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/finalizers.xml/AvoidCallingFinalize">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strings.xml/UseStringBufferLength">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/unusedcode.xml/UnusedPrivateField">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/unusedcode.xml/UnusedLocalVariable">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/basic.xml/EmptyStaticInitializer">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/BrokenNullCheck">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/AvoidDollarSigns">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/ClassNamingConventions"/>
   <rule ref="rulesets/finalizers.xml/EmptyFinalizer">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/MethodWithSameNameAsEnclosingClass">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strings.xml/UnnecessaryCaseChange">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidRethrowingException">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/EqualsNull"/>
   <rule ref="rulesets/strictexception.xml/ExceptionAsFlowControl">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/unusedcode.xml/UnusedFormalParameter">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/SuspiciousHashcodeMethodName">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/naming.xml/SuspiciousEqualsMethodName"/>
   <rule ref="rulesets/design.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="rulesets/basic.xml/ClassCastExceptionWithToArray">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/PreserveStackTrace">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/imports.xml/DontImportJavaLang">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/EmptyTryBlock">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/EmptyIfStmt">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/BooleanInstantiation"/>
   <rule ref="rulesets/basic.xml/EmptySwitchStatements">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidCatchingNPE">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/basic.xml/EmptySynchronizedBlock">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/IdempotentOperations">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/UselessOperationOnImmutable">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strings.xml/InefficientStringBuffering">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/optimizations.xml/UseArraysAsList">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/strings.xml/StringToString">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/strings.xml/StringBufferInstantiationWithChar">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/UnusedNullCheckInEquals">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/basic.xml/UnconditionalIfStatement">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/unusedcode.xml/UnusedPrivateMethod">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/migrating.xml/AvoidEnumAsIdentifier">
      <priority>1</priority>
   </rule>
   <rule ref="rulesets/design.xml/InstantiationToGetClass">
      <priority>1</priority>
   </rule>
   <rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="" message="Avoid Empty Catch Blocks (empty catch in finally with resource.close() is ok)" name="EmptyCatchBlockExceptCloseResource" typeResolution="true">
      <description>
  An Extension of the original EmptyCatchBlock rule to ignore the empty catch blocks for IOException usually 
done within catch- or finally-blocks when closing resources.
  </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value><![CDATA[

//CatchStatement
 [count(Block/BlockStatement) = 0 and (Block/@containsComment = 'false')]
 [FormalParameter/Type/ReferenceType
   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
 ]
[count(../Block//Statement[ends-with(StatementExpression/PrimaryExpression/PrimaryPrefix/Name/@Image,'close')])=0 
       or FormalParameter/Type/ReferenceType/ClassOrInterfaceType[@Image != 'IOException']
       or count(ancestor::FinallyStatement)=0]


    ]]></value>
         </property>
      </properties>
      <example><![CDATA[

class Test {
	private void test() {
		InputStream is=null;
		try {

		   //
		} catch (Throwable e) {
			try {
				if(is!=null) {
					is.close();
				}
			//this one is ignored, because the previous block contains a close() and it is within a catch or finally block
			} catch(IOException ioe) {
			}
		}
		try {
			if(is!=null) {
				is.close();
			}
		//This one is found because it is not in a catch or finally clause
		} catch(IOException ioe) {
		}
	}
}


  ]]></example>
   </rule>
   <rule class="net.sourceforge.pmd.rules.XPathRule" dfa="false" externalInfoUrl="" message="A catch statement that only does a printStackTrace() on the Ecxeption should be avoided." name="AvoidPrintStackTraceOnly" typeResolution="true">
      <description>
  Catch Blocks that only do a printStackTrace make finding problems more difficult by making logfiles cluttered. 
Think about managing exceptions at a higher level consistently.
		</description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value><![CDATA[
					
//CatchStatement[starts-with(Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name/@Image,concat(FormalParameter/VariableDeclaratorId/@Image,'.')) and ends-with(Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name/@Image,'printStackTrace') and count(Block/BlockStatement/Statement) =1]

				]]></value>
         </property>
      </properties>
      <example><![CDATA[
			
class Test {
private void test() {
try {
   //
} catch (Throwable e) {
  e.printStackTrace();
}
}
}

		]]></example>
   </rule>
   <rule ref="rulesets/strings.xml/UseEqualsToCompareStrings">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/basic.xml/OverrideBothEqualsAndHashcode">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/basic.xml/DoubleCheckedLocking">
      <priority>2</priority>
   </rule>
</ruleset>
